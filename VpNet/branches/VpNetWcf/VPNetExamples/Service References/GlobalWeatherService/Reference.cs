//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VPNetExamples.GlobalWeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="GlobalWeatherService.GlobalWeatherSoap")]
    public interface GlobalWeatherSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/GetWeather", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWeather(string CityName, string CountryName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetWeather", ReplyAction="*")]
        System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/GetCitiesByCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCitiesByCountry(string CountryName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCitiesByCountry", ReplyAction="*")]
        System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetCitiesByCountry(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface GlobalWeatherSoapChannel : VPNetExamples.GlobalWeatherService.GlobalWeatherSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCitiesByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GlobalWeatherSoapClient : System.ServiceModel.ClientBase<VPNetExamples.GlobalWeatherService.GlobalWeatherSoap>, VPNetExamples.GlobalWeatherService.GlobalWeatherSoap {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByCountryDelegate;
        
        private EndOperationDelegate onEndGetCitiesByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByCountryCompletedDelegate;
        
        public GlobalWeatherSoapClient() {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs> GetWeatherCompleted;
        
        public event System.EventHandler<GetCitiesByCountryCompletedEventArgs> GetCitiesByCountryCompleted;
        
        public string GetWeather(string CityName, string CountryName) {
            return base.Channel.GetWeather(CityName, CountryName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CityName = ((string)(inValues[0]));
            string CountryName = ((string)(inValues[1]));
            return this.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            string retVal = this.EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string CityName, string CountryName) {
            this.GetWeatherAsync(CityName, CountryName, null);
        }
        
        public void GetWeatherAsync(string CityName, string CountryName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        CityName,
                        CountryName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        public string GetCitiesByCountry(string CountryName) {
            return base.Channel.GetCitiesByCountry(CountryName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCitiesByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetCitiesByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return this.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByCountry(System.IAsyncResult result) {
            string retVal = this.EndGetCitiesByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByCountryCompleted(object state) {
            if ((this.GetCitiesByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByCountryCompleted(this, new GetCitiesByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByCountryAsync(string CountryName) {
            this.GetCitiesByCountryAsync(CountryName, null);
        }
        
        public void GetCitiesByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCitiesByCountryDelegate == null)) {
                this.onBeginGetCitiesByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByCountry);
            }
            if ((this.onEndGetCitiesByCountryDelegate == null)) {
                this.onEndGetCitiesByCountryDelegate = new EndOperationDelegate(this.OnEndGetCitiesByCountry);
            }
            if ((this.onGetCitiesByCountryCompletedDelegate == null)) {
                this.onGetCitiesByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCitiesByCountryDelegate, this.onGetCitiesByCountryCompletedDelegate, userState);
        }
    }
}
